import os
import uuid
from fastapi import APIRouter, UploadFile, File, HTTPException, Request
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded

from app.services.parser_factory import ParserFactory
from app.services.file_service import save_upload_to_temp
from app.models import FileResponse
from app.config import settings
from app.utils import get_logger


router = APIRouter()
limiter = Limiter(key_func=get_remote_address)
logger = get_logger(__name__)


@router.post("/upload", response_model=FileResponse)
@limiter.limit(settings.rate_limit)
async def upload_file(request: Request, file: UploadFile = File(...)):
    """
    Upload v√† parse file sang Markdown.
    - L∆∞u file t·∫°m ‚Üí parse ‚Üí xo√° file t·∫°m sau khi x·ª≠ l√Ω xong.
    - Gi·ªõi h·∫°n t·ªëc ƒë·ªô theo c·∫•u h√¨nh rate_limit trong settings.
    """
    temp_path = None
    try:
        logger.info("üì§ Upload received: filename=%s content_type=%s", file.filename, file.content_type)

        # ƒê·ªçc n·ªôi dung v√† l∆∞u t·∫°m
        content = await file.read()
        file_id, temp_path = await save_upload_to_temp(file.filename, content)
        logger.debug("üóÇÔ∏è File t·∫°m ƒë∆∞·ª£c l∆∞u t·∫°i: %s", temp_path)

        # L·∫•y parser ph√π h·ª£p
        file_ext = file.filename.split(".")[-1].lower() if "." in file.filename else ""
        parser = ParserFactory.get_parser(file_ext)

        # Parse file sang markdown
        markdown_content = parser.parse(temp_path)
        logger.info("‚úÖ Parsed file successfully: id=%s ext=%s size=%dB", file_id, file_ext, len(content))

        return FileResponse(
            id=file_id,
            file_name=file.filename,
            file_size=len(content),
            file_type=file.content_type,
            extracted_content=markdown_content,
        )

    except Exception as e:
        logger.exception("‚ùå Failed to process upload: filename=%s error=%s", file.filename, str(e))
        raise HTTPException(status_code=400, detail=f"L·ªói khi x·ª≠ l√Ω file: {str(e)}")

    finally:
        # D·ªçn d·∫πp file t·∫°m, k·ªÉ c·∫£ khi l·ªói
        if temp_path and os.path.exists(temp_path):
            try:
                os.remove(temp_path)
                logger.debug("üßπ ƒê√£ xo√° file t·∫°m: %s", temp_path)
            except Exception as cleanup_err:
                logger.warning("‚ö†Ô∏è Kh√¥ng th·ªÉ xo√° file t·∫°m %s: %s", temp_path, cleanup_err)
